waiting和blocked有什么区别？？？
wait(1000)和sleep(1000)有什么区别？？？
volatile，读之前，一定会先从工作内存写入内存，然后再读？？？




1、在虚拟机启动时，会创建一个名字为“main”的线程，
然后找到包含main方法的那个类，让“main”线程去执行main方法。

2、多线程到底有什么用，优势在哪里

因为一个线程只能运行在一个CPU核心上，多线程可以充分利用多核计算机的多核特性，提交处理效率。

将一些不需要立即响应给用户的操作，派发给其它线程去完成（发邮件等），提高响应时间。

3、创建线程的两种方式：继承Thread类、实现Runnable接口。

Thread类既实现了Runnable接口，而且其内部又包含了一个Runnable属性。

通过继承Thread类方式创建线程时，需要覆盖run()方法。若要启动线程，应该调用线程的start方法。


thread.start()和thread.run()区别：thread.run()是普通的方法调用，是在主线程中运行的。


Thread类的start方法，最终也是调用的自身的run方法吗？？？

线程启动后，就交给虚拟机去运行run方法了？？？，代码上的先后，不保证执行时间上的先后，执行先后是随机的。

因为Thread类实现了Runnable接口，所以在创建线程时，也可以给它的构造器内传入一个Thread类，这样做的意思是，将一个线程中的run方法中，调用另外一个线程的run方法。

4、停止线程的两种方式：run方法完成，正常退出；使用interrunpt中断线程。


5、多线程不一定比单线程快，因为多线程要进行线程的创建和上下文切换。



7、对一个volatile变量的读，总是能看到任意线程对这个volatile变量最后的写入。
对任意volatile变量的单个读/写操作具有原子性，但类似i++这种复合读写操作，不具有原子性。
volatile变量的“写-读”，与“释放锁-获取锁”，有这相同的内存效果。

四种内存屏障：StoreStore、StoreLoad、LoadLoad、LoadStore


8、当线程释放锁时，JMM会把该线程对应的工作内存中的共享变量刷新到主内存中。
当线程获取锁时，JMM会把该线程对应的工作内存置为无效，从而使临界区的代码必须从主内存中读取共享变量。

9、如果指令重排序的结果不会改变程序的执行结果，则JMM允许编译器和处理器进行重排序以及其它优化。
happens before仅仅是保证最终执行结果和按最初执行顺序执行的最终结果一样。


10、在类加载时，JVM会对获取类的初始化锁，以禁止多个线程对同一个类进行初始化。

11、线程的6种状态：NEW、RUNNABLE、BLOCKED、WAITING、TIME_WAITING、TERMINATED
线程创建之后，调用start()方法开始运行。
当线程执行wait()方法之后，线程进入等待状态。进入等待状态的线程需要依靠其它线程的通知才能返回到运行状态。
而限时等待状态相当于在等待状态的基础上增加了时间限制，当时间一结束，便会返回到运行状态。
当线程调用同步方法时，在没有获取到锁的情况下，该线程会进入阻塞状态。
当线程在执行完Runnable的run()方法之后，便进入到终止状态。


12、当main方法结束时，若此时已经没有非daemon线程，则所有daemon线程会立即结束，不保证finally块里的代码会执行。


13、notify()方法：将“等待队列”中的一个等待线程移到“同步队列”中。



14、为什么要使用线程池：

系统的内存有限，能创建的线程数目也有限，如果每个请求都创建一个线程的话，会导致内存溢出。
另一方面，线程的创建和销毁，也需要消耗系统资源。
而且，大量的线程，在进行上下文切换时，也会消耗大量资源。



















