
CSS Reset：清除浏览器默认样式，定义全局样式



开发流程：
需求分析：用例图，用例描述，ER图
总体设计：系统结构图，数据库表，顺序图，页面设计
编码：导jar包，编写配置文件，建包结构，分层编写代码





nginx

反向代理

负载均衡

集群

分布式




css四种引入方式，用style属性，用style标签，用link标签，用@import

css优先级，从上到下，从外到内

css选择器，标签选择器，类选择器，id选择器，属性选择器



js是弱类型语言，java是强类型语言

js是基于对象的，java是面向对象的

js不区分整数和小数，字符串可以单引号或双引号

js中只有一中容器，那就是数组，并且数组长度可变

js内置对象，BOM，DOM（树状结构）

onsubmit事件，空值表单提交


xml的encoding属性：打开该文件时使用的编码

xml区分大小写

CDATA

DTD约束

schema约束

DOM，SAX

JAXP

dom4j


*********************************************************************************************

List,Set,Map遍历（只能装Object类型）：

List:普通for循环，增强for循环，迭代器
Set:增强for循环，迭代器
Map:获得key的集合，通过Map.Entry<K,V>


泛型方法，泛型类


enum枚举

自动拆装箱
Integer i = 128;Integer j = 128;System.out.print(i==j);


增强for循环：数组；实现了Iterable接口的集合；


可变参数：底层是数组；一个方法只能有一个可变参数，且必须放在参数列表末尾；


查看进程占用的端口：netstat -ano

tomcat下项目目录结构：WEB-INF（web.xml,classes,lib）

部署项目的三种方式

http1.0,http1.1

通过getHeader方法防盗链






**************************************************************************

servlet是一个小的java程序，运行在服务器中，接收和响应从客户端发送来的请求


启动tomcat--->解析web.xml--->当输入url时--->tomcat接受请求，解析web.xml，找到对应servlet类，利用反射执行service方法，做出响应

servlet生命周期：init，service，destroy

默认的，第一次访问时，servlet实例被创建，init方法仅调用一次，而且仅创建一个实例

向下强转时到底发生了什么？

service方法里调用doGet或doPost

servlet自动加载：通过load-on-startup标签

url-pattern的优先级，完全匹配，/*匹配，*.action匹配

相对路径：不以“/”开头；绝对路径（看情况是否加项目名）：以“/”开头

所有servlet共享ServletContext对象

响应头的location属性，和302状态码共同实现重定向，等于sendRedirect方法

响应头的refresh属性，实现定时跳转（通过http-equiv属性）

控制缓存：last-modified，if-modified-since，304

禁用浏览器缓存：三个响应头（Cache-Control，Pragma，Expires）



JavaBean：封装数据





数据库就是一个文件系统，用来存东西的可一存数据，可以存数据间的关系


事务四个特性，原子性（转账，要么都成功，要么都失败），

事务四个隔离级别，不同级别会引起，脏读（一个事务独到另一个未提交事务的数据），不可重复读（一个事务内前后读到数据不一致），虚读（行数变化），丢失更新（一个事务把另一个事务的结果覆盖）


连接池：一个装Connection的容器，最后close()方法不销毁连接对象，而是重新放回连接池


元数据，数据库中，库，表，列的定义信息

dbutils:
QueryRunner用于执行sql语句，ResultSetHandler用于结果集的封装，DbUtils是个工具类

BeanHandler实现：1、内省，反射，元数据，泛型;2、使用BeanUtils实现


功能点：基本增删改查（日期处理，radio处理），批量删除（js），条件查询（select标签）

PageBean:当前页码，每页记录数，总页数


设置js的location.href


请求里没有jsessionid时，创建session；请求里jsessionid和服务器端不同时，创建session；
请求产生，request创建；响应产生，request销毁；


监听器：监听对象创建销毁；监听属性变化；



Servlet规范中有三个方面：Servlet，Listener，Filter



Filter：自动登录；权限空值；

ResourceBundle用法；Properties用法；



乱码问题：请求时默认按iso-8859-1编码；所以将其通过iso-8859-1编码后重新用utf-8解码；响应时再重新按utf-8编码；



文件上传（本质就是io流操作）：request对象有个getInputStream()方法

GenericServlet通过getServletContext().getRealPath()得到服务器端某文件的真实路径


SimpleDateFormat：format是格式化（将日期格式化为字符串）；parse是解析（将字符串解析成日期）；


案例：简单网盘系统（上传下载），用户名校验（ajax），商品列表展示（ajax），省市联动（ajax，json）

ajax步骤：得到XMLHttpRequest对象；编写回调函数；open；send；




注解的本质就是一个接口，继承了Annotation接口。


代理：在代理类中，将被代理类作为成员变量



案例：注解+动态代理实现权限控制


newProxyInstance


struts2配置加载顺序：default.properties;  struts-default.xml;  struts.xml;  web.xml

action配置:<package name="" namespace="" extends="">  <action name="" class="" method="">  <result name="" type="">

result结果类型：dispatcher,chain,redirect,redirectAction

action也属于model的原因是，在其内部有自己某些属性的get，set方法


struts2默认每次请求都是一个新的action


struts2获取servlet api：通过ActionContext；通过实现接口；通过ServletActionContext；

struts2属性获取：属性注入；模型驱动；

struts2拦截器只能拦截action


struts2下载：result类型设置为stream，加上三个属性参数（contentType,contentDisposition,inputStream）

struts2上传：提供三个属性（upload,uploadFileName,uploadContentType）

ActionContext里有ValueStack的引用；
ValueStack里有List和Map，List就是root，Map就是OgnlContext；同时Map里持有List的引用

OGNL表达式：#（获取数据），%（控制是否解析），$（在配置文件里使用）

防止表达重复提交（token），类似验证码的实现


MethodFilterInterceptor


<global-exception-mappings>



slf4j: simple logging facade for java


hibernate默认需要手动开启事务


get和load的区别：get立刻发出sql语句；load采用延迟加载，真正使用查询对象时才发出sql


持久化类属性类型最好用包装类型，这样默认为Null；
不要用final修饰持久化类，因为这样会无法生成代理对象（延迟加载时会生成代理对象）


hibernate修改和删除，一般先查询出来，再进行修改或删除

Configurration对象：加载配置文件，管理配置信息

SessionFactory：维护连接池，创建Session对象

如果没有手动开启事务，则session的每个操作都是一个独立的事务，并且自动rollback（默认autocommit为false时）

主键生成策略：increment在多线程时会出现问题

三种状态：瞬时态（无OID，没与session关联），持久态（有OID，与session关联），托管态（有OID，没与session关联）

默认一级缓存开启，与session生命周期相关（在session的生命周期内，连续两次查询同一对象，仅发送一条select语句）

快照区

一级缓存的管理：flush,evict,clear,refresh

一级缓存的刷出时机（MANUAL,AUTO,COMMIT,ALWAYS）：某些查询时，事务提交时，flush时

saveOrUpdate（瞬时态-->save；托管态-->update）：不能设置不存在的id，否则会报错（前提是没有设置unsaved-value）

配置select-before-update,更新前查询，如果一致则不更新


一对多的配置：三个属性（name，column，class）
一对多（级联操作是有方向性的）：在set标签上设置cascade；在many-to-one标签上设置cascade
一对多，若两方均没有配置级联删除，则删除一方时，将多方的外键置为空
cascade属性的配置：none,save-update,delete,all,delete-orphan,all-delete-orphan
inverse：配置单方维护关联关系

HQL分页：setFirstResult，setMaxResults
HQL查询单个结果：uniqueResult
HQL投影查询：提供针对某些属性的构造方法，可将这些属性封装到对象中
Query接口有个setEntity方法
迫切内连接，通过fetch关键字，将结果封装到对象中（须用distinct排重）
离线查询：DetachedCriteria




类级别的检索：在class标签上设置lazy="false"，是load方法的延迟加载失效


关联级别的检索：在set标签，many-to-on标签上设置lazy="false"

在set标签上，fetch取值（select,join,subselect）,lazy取值（true,false,extra）；
在set标签上（默认fetch="select"，lazy="true"）；
fetch为join时，lazy的配置失效（迫切左外连接查询）

在many-to-one标签上，fetch取值（select,join），lazy取值（false,proxy,no-proxy）；
在many-to-one标签上，（默认fetch="select"，lazy="proxy"，即若无设置，则默认懒加载）；
lazy="proxy"，有一方的class标签上的lazy属性的值决定


批量抓取：在一方的class标签或set标签上设置batch-size


设置事务隔离级别：<property name="hibernate.connection.isolation">4</property>


getCurrentSession（事务提交时session关闭？？？事务和session生命周期的关系？？？）：获取当前线程的session，线程结束后自动关闭session





二级缓存：
类缓存区（缓存对象的散装数据）：class-cache
集合缓存区（缓存对象的id）：collection-cache

list方法：只发送一条sql语句，可以向二级缓存放数据；但不可以从二级缓存取数据
itetate方法：先查出所有id，再根据id逐条查询每个对象；但可以从二级缓存去数据

查询缓存：配置use_query_cache，调用setCacheable(true)方法


=================================================================================================


IOC（将对象的创建权，交由Spring(工厂)管理）：工厂模式+反射+配置文件
DI（创建对象时，将属性的值注入到对象内）

一般通过无参数的构造方法来创建Bean的实例

Bean标签上的属性：id，class，scope(singleton,prototype,request,session,globalSession)；scope默认是singleton

Bean的生命周期：BeanPostProcessor + 动态代理

类的属性的注入：通过有参的构造方法；通过set方法
命名空间p
SpEL


用注解装配Bean：@Component
用注解注入属性：
	普通属性：@Value
	对象属性：@Autowired
		  @Qualifier



配置ContextLoaderListener监听器和<context-param>：仅在项目启动时加载一次applicationContext.xml

Spring继承JUnit：导入spring-test包，使用@RunWith，@ContextConfiguration注解


IOC在某方面可以降低耦合
AOP在某方面可以提高复用性

AOP--横向抽取--采用代理机制

Spring动态代理：如果类实现了接口，就使用JDK的动态代理生成代理对象，
		如果类没有实现任何接口，则使用CGLIB生成代理对象


基于ProxyFactoryBean的代理：先有被代理对象，再将被代理对象传入代理类中生成代理
自动代理：基于BeanPostProcessor，在Bean的生成过程中，就产生了代理对象，把代理对象返回


事务：
四个特性：原子性，一致性，隔离性，持久性
可能发生的问题：脏读，不可重复读，虚读
隔离级别：四个

Spring中事务传播机制
：PROPAGATION_REQUIRED,PROPAGATION_REQUIRES_NEW,PROPAGATION_NESTED



基于注解的声明式事务管理，怎么指定某些方法？？？



OpenSessionInView






======================================================================================

Maven：跨平台的项目管理工具，进行项目构建，依赖管理，项目信息管理

Maven目录结构：
src
	main
		java
		resources
	test
		java
		resources
target
pom.xml



struts2：某些情况获取session需要用ActionContext.getContext().getSession()

Struts2：get用于在页面获取值栈中的内容；set用于注入属性？
Hibernate：get；set
Spring：set用于注入属性





**********************************************************************************

多线程，共享成员变量

SqlSession是线程不安全的，应该定义在方法内















