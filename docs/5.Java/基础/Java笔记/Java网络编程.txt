1、29页，SimpleServer不用accept？


authorize：授权
authenticate：认证

****************

1、服务器程序通过一直监听端口，来接收客户程序的连接请求
ServerSocket server = new ServerSocket(8000);
Socket socket = server.accept();

2、传输层向应用层提供了套接字Socket接口，Socket封装了下层的数据传输细节，
应用层的程序通过Socket来建立与远程主机的连接。

3、端口是用来标识进程的逻辑地址，TCP和UDP端口独立互不影响。

4、IPv6是128位

5、ServerSocket的accept方法，从连接队列中取出一个客户的连接请求，然后创建与客户连接的Socket对象，并将它返回；
如果队列中没有连接请求，accept()方法就会一直等待，直到接收到了连接请求再返回。


6、FTP使用两条并行的连接，一个用于控制连接，一个用于数据连接

7、线程池：两个接口，Executor、ExecutorService；一个工具类，Executors。

8、线程阻塞的原因：
执行了Thread.sleep(int n)，
执行了wait()，
执行IO操作，等待相关的资源，如System.in.read()，
执行一段同步代码，但暂时没有获得锁。

9、HTTP，FTP建立在TCP之上。
NFS，TFTP建立在UDP之上。

10、HTTP请求头里包含的，都是“客户端浏览器”这一方的信息，和请求正文的信息。

11、ByteArrayOutputStream是基本流，可以通过DataOutputStream来包装。

12、对象的序列化：把Java对象转换为字节序列；
对象的反序列化：把字节序列恢复为Java对象。

13、序列化默认只会序列化非transient的实例变量；静态变量不会被序列化，transient变量不会被序列化；
常量不在序列化考虑范围内，因为常量始终有值。

默认反序列化时，不会调用类的任何构造方法。

默认序列化对象A时，会序列化所有由A可以导向到的对象。

14、实现了Externalizable的类，将完全由自身控制本身的序列化行为，同时必须提供一个public无参构造器，以供反序列化时使用。

15、

























