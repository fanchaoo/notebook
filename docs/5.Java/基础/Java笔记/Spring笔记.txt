0、web.xml 的加载顺序是：context-param -> listener -> filter -> servlet

1、容器可能会通过反射的方式，根据Bean标签的class属性，来加载类。所以类必须有一个无参构造器。

2、创建bean：
通过bean标签显式创建；
通过component-scan标签，和@Component注解创建；
通过@ComponentScan注解，和@Component注解创建；

3、装配bean：
通过bean标签内的property标签或constructor-arg标签,设置显式装配；
通过bean标签上的autowire属性，设置自动装配；
通过@Autowired注解，设置自动装配；

4、配合方式
1-1，1-2（纯XML）
2-3，（XML混合注解）
3-3，（纯注解）

5、IOC容器的两个阶段：容器启动阶段，对象实例化阶段
BeanFactoryPostProcessor存在于容器初始化阶段，BeanPostProcessor存在于对象实例化阶段

6、Bean的实例化过程
实例化bean对象...设置对象属性...检查Aware相关接口并设置依赖...前置处理...init-method...后置处理...注册销毁回调接口...使用中


7、@Autowired默认绑定方式为byType，并可以通过@Qualifier添加byName功能

8、<context:component-scan>标签默认通过类名（byName），生成首字母小写的驼峰式类名。
并向容器添加了AutowiredAnnotationBeanPostProcessor等后处理器，
因此不用再引入<context:annotation-config>标签,也不用添加在配置文件里添加AutowiredAnnotationBeanPostProcessor



9、Pointcut的两个重要接口，Pointcut，MethodMatcher；
Advice的几个重要接口，MethodBeforeAdvice，ThrowsAdvice，AfterReturningAdvice，MethodInterceptor；
Aspect的接口：PointcutAdvisor
Weaver的接口：ProxyCreatorSupport继承了ProxyConfig，实现了Advised，内部持有一个AopProxyFactory（以创建AopProxy）,
并且旗下还有几个织入器子类，ProxyFactory，ProxyFactoryBean，AspectJProxyFactory


10、AOP

通知（Advice）：在何时做，做什么
切点（Pointcut）：在何处做
切面（Aspect）=通知+切点

切点是在切面里定义的，连接点是程序里应用通知的那些位置。
即切点是一个定义，连接点（Joinpoint）是真正的那些位置。
切点定义了通知被应用的具体位置（有哪些连接点）

织入：把切面应用到目标对象，并创建新的代理对象的过程


连接点是切面被织入的那些位置。
切点定义有哪些位置被织入，即有哪些连接点；代表的是连接点的表述方式，即归纳定义相应的连接点。
通知承载了要织入到连接点的那些逻辑，是逻辑的载体。


Advice实现了将被织入到Pointcut规定的Joinpoint处的横切逻辑。



SpringAOP使用动态代理机制实现AOP（动态代理机制只针对接口有效）。
SpringAOP只支持方法执行（Method Execution）类型的Joinpoint。


11、AspectJ相关

切点：AspectJExpressionPointcut
通知：@Before，@AfterThrowing，@AfterReturning，@After，@Around

12、AOP的配置方式：
SpringAOP第一代的配置，SpringAOP基于Schema的配置
AspectJ基于注解的配置，AspectJ基于Schema的配置


13、数据访问异常层次体系：
DataAccessException

14、Spring对数据访问的处理方式：
统一管理资源（SqlSessionFactory，SqlSession）
统一转译异常
模版方法模式+callback接口


15、事务：
ACID：原子性（atomicity）、一致性（consistency）、隔离性（isolation）、持久性（durability）
隔离级别：read uncommitted、read committed、repeatable、serializable
隔离级别不同产生的现象：dirty read、nonrepeatable read、phantom read
传播行为：required、supports、mandatory、riquires new、not supported、never、nested

16、Spring关于事务的几个接口：
PlatformTransactionManager、TransactionDefinition、TransactionStatus


17、声明式事务的四种配置方式
























