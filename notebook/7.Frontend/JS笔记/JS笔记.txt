页面内元素的加载?和JS的加载？？？

XML DOM???


事件是在什么时刻绑定上的？？是如何绑定的？？？是如何执行的？？？


JS条件语句里的真假如何判断的？为什么不能直接写“==true”？？if(document.getElementsByClassName){}


定时器的函数能加参数吗？

为什么要清除定时器？？


addEventListener？？？和普通的事件绑定有什么区别？？？


跨域原理？？？谁不允许谁？？是ajax本身不允许在该域名内访问其它域名内的内容？还是某域名不允许其它域名下ajax调用？？？



ajax获取的内容，当设置返回类型时，http响应里的类型是什么，这个是服务端设定的还是ajax设定的？？



jsonp返回的内容，http响应里的内容类型是什么？？纯文本吗？？或者script？？？



jquery的jsonp随机生成的函数名，该函数是怎么执行success函数的？？？





*******************************************************

1、常见特效

下拉菜单、Tab栏切换、模态框(点击空白处隐藏)、轮播图、电梯导航
筋斗云导航栏、放大镜效果、水平滚动条、垂直滚动条、拖拽弹出框


2、输出语句

window.alert("hello");
简写：alert("hello");

console.log("hello");
console.warn("hello");
console.error("hello");

document.write("hello");



3、事件三要素

事件源、事件、事件处理程序

语法：事件源.事件 = function(){ 事件处理程序 }

常见事件：
onclick(鼠标点击)、
onmousemove(鼠标移动)、
onmouseover(鼠标移入)、onmouseout(鼠标移出)、
onmousedown(鼠标按下)、onmouseup(鼠标弹起)、
onfocus(元素聚焦)、onblur(元素失焦)、
oninput(输入框文本有变化)、onchange(下拉菜单)、
onkeydown(键盘按下)、onkeyup(键盘弹起)

window.onscroll(页面滚动)
window.onresize(窗口大小改变)
window.onpopstate(回退到某历史记录)


拖动==鼠标按下+鼠标移动

4、变量

全局变量：在函数外通过“var”声明的变量；或在函数内没有通过“var”声明，而是直接赋值的变量。
局部变量：在函数内通过“var”声明的变量。


JS只有两个作用域：
全局作用域：直接在标签内定义的变量，处在全局作用域内。
函数作用域：在函数内定义的变量，处在函数作用域内。


5、入口函数 
window.onload = function(){ 
	//内部放JS代码
}
这个函数的意思就是说，当我们页面加载完毕之后，采取执行函数体里面的JS代码。
就是说,等页面的结构、样式加载完毕之后。

该函数一个文件只能写一次。


6、JS书写方式

行内式

内嵌式

外链式



7、JS数据类型

数字、布尔、字符串、null、undefined

数据类型之间的转换。


8、函数声明

声明变量用var
声明函数用function


函数直接量声明


9、变量声明提升

在函数体内部声明变量，会把该声明提升到函数体的顶端，
但仅仅提升声明，并不赋值。


10、arguments

一个数组：用于存储传递给函数的实参。

arguments.callee，当前函数本身。



11、元素的几个属性

style、className、value、innerHTML


12、

标签==元素==元素节点



13、数组常用方法：

push：在末尾插入
pop：在末尾删除
unshift：在开头插入
shift：在开头删除
concat：连接两个数组，返回新数组(原数组不改变)
join：将数组元素，按某个分隔符，连接成字符串
split：将字符串，按某个分隔符，拆分为数组


JS里for-in循环遍历数组，得到的是索引号(该索引号为string类型)。
Java里for-each循环遍历数组，得到的是数组内变量的值。


14、JS的组成

核心（ECMAScript）欧洲计算机制造商协会
      描述了JS的语法和基本对象。
文档对象模型（DOM）
     处理网页内容的方法和接口
浏览器对象模型（BOM）
     与浏览器交互的方法和接口  



15、节点关系

parentNode	nextSibling			firstChild		childNodes(包括文本节点)
		nextElementSibling		firstElementChild	children(仅元素节点)
		previousSibling			lastChild
		previousElementSibling		lastElementChild





16、节点操作

创建节点：

var box = document.createElement("div");


添加孩子节点到末尾：

parent.appendChild(box);


插入孩子节点：

parent.insertBefore(box,null);


删除孩子节点：

parent.removeChild(box);



克隆节点：

demo.parentNode.appendChild(demo.cloneNode(true));



17、元素属性操作

获得某属性：

getAttribute("class")

设置某属性：

setAttribute("class","box")


删除某属性：

removeAttribute("class")


18、

JS里的"/"不是整除。



19、日期对象：Date

getFullYear ()	            获取完整年份（浏览器都支持）
getMonth ()                获取月  0-11
getDate()                  获取日 1-31
getDay ()                  获取星期 0-6   

getHours ()	               获取小时 0-23
getMinutes ()	               获取分钟 0-59
getSeconds ()	               获取秒  0-59
getMilliseconds ()            获取当前的毫秒 

getTime ()	       返回累计毫秒数(从1970/1/1午夜)



20、定时器

window.setInterval(“执行的函数”,间隔时间) 

正确的写法:
setInterval(fun, 1000);      //1000毫秒

给定时器命名后，可以通过clearInterval(变量)，来清除定时器。


setTimeout(fun,1000)，可以通过递归调用来模拟setInterval。



JS是单线程执行的，定时器的代码会被插入执行队列，在其它正常代码执行完毕后再执行。



21、

this可以表示事件的调用者，
this可以表示函数的使用者。


22、页面跳转

window.location.href = "";


23、JS的与运算

如果第一个为假，则返回第一个；如果第一个为真，则返回第二个。

alert(1 && 10);会弹出10。



24、字符串操作

根据位置返回字符：charAt、charCodeAt

根据字符返回位置：indexOf、lastIndexOf

字符串连接：concat

截取字符串：

根据始末位置截取：slice、substring

根据起始位置和截取个数截取：substr




25、网址编码和解码

encodeURIComponent
decodeURIComponent



26、offset

offsetWidth    offsetHeight
得到对象的宽度和高度(自己的，与他人无关) 
offsetWidth =  width  + border  +  padding   
div {  width:220px;  border-left:2px solid red; padding:10px;}
div.offsetWidth =  220 + 2 + 20     
为什么不用 div.style.width   因为style 只能得到行内的数值



offsetLeft  offsetTop    
返回距离上级盒子（最近的带有定位，relative、absolute、fixed）左边的位置

如果父级都没有定位则以body 为准
这里的父级指的是所有上一级 不仅仅指的是 父亲 还可以是 爷爷 曾爷爷 曾曾爷爷。。。。

offsetLeft 从父级的padding 开始算    父亲的border 不算
总结一下：  就是子盒子到定位的父盒子边框到边框的距离



offsetParent  
返回改对象的父级 （带有定位） 不一定是亲的爸爸 
前面学过一个返回父亲(亲的)    parentNode   有所区别

如果当前元素的父级元素没有进行CSS定位（position为absolute或relative），offsetParent为body。
如果当前元素的父级元素中有CSS定位（position为absolute或relative），offsetParent取最近的那个父级元素。




offsetTop style.top 的区别
一、最大区别在于  offsetLeft  可以返回没有定位盒子的距离左侧的位置。
而 style.top 不可以  只有定位的盒子 才有 left  top
二、offsetTop 返回的是数字，而 style.top 返回的是字符串，除了数字外还带有单位：px。
style.left = 300px      parseInt（300px）    结果  300
parseInt（style.left） + parseInt（style.left）  
三、offsetTop 只读，而 style.top 可读写。
四、如果没有给 HTML 元素指定过 top 样式，则 style.top 返回的是空字符串。
五、最重要的区别  style.left 只能得到 行内样式     offsetLeft 随便




27、事件对象-event

pageX  clientX  screenX 区别
screen X   screenY   
是以我们的电脑屏幕 为基准点   测量 

pageX  pageY   
以我们的  文档   （绝对定位）  的基准点 对齐 (参考有滚动条时)     
ie678 不认识 

clientX   clientY
以 可视区域 为基准点   类似于    固定定位


28、document元素访问

document.head
document.body
document.title
document.documentElement




29、关于scroll

scrollTop、scrollLeft

如何得到scrollTop：
var scrollTop = window.pageYOffset || 
document.documentElement.scrollTop ||
document.body.scrollTop || 0;

页面滚动到某坐标：window.scrollTo(x,y);



30、关于client

clientWidth、clientHeight

clientHeight、offsetHeight、scrollHeight区别：


检测屏幕宽度：


window.resize和clientWidth：实现响应式


31、事件冒泡

if(event && event.stopPropagation) {
	event.stopPropagation();  //  w3c 标准
} else {
	event.cancelBubble = true;  // ie 678  ie浏览器
}


32、获得当前事件作用的元素

var targetId = event.target ? event.target.id : event.srcElement.id;


33、获得用户选中的内容

if(window.getSelection) {
    txt = window.getSelection().toString();   // 转换为字符串
} else {
    txt = document.selection.createRange().text;   // ie 的写法
}


34、三个取整函数

Math.ceil
Math.floor
Math.round


35、访问CSS属性

(1). 利用点语法 
   box.style.width      box.style.top    
 点语法可以得到 width  属性  和 top属性  带有单位的。 100px
 但是这个语法有非常大的缺陷，  不变的。 
 后面的width  和 top  没有办法传递参数的。
  var w = width;
  box.style.w     
(2). 利用 []  访问属性
  语法格式:  box.style[“width”]   
            元素.style[“属性”];
  console.log(box.style["left"]);
   
   最大的优点  ：  可以给属性传递参数


36、得到CSS属性值

function getStyle(obj,attr) {  //  谁的      那个属性
	if(obj.currentStyle)  // ie 等
	{
	  return obj.currentStyle[attr];  
	}
	else
	{
	  return window.getComputedStyle(obj,null)[attr];  // w3c 浏览器
	}
}


37、for-in循环

for-in循环，可以遍历数组或对象

38、in运算符

左侧为字符串，右侧为数组或对象

用于判断某索引号是否在数组内，或某属性是否在某对象内。



39、回调函数

当某些操作完成后，或者是当某个条件达到后，执行该函数。
如何执行回调函数，即在什么时候执行回调函数，完全是由人为控制的，可以在代码里根据各种条件进行限定。


40、闭包案例

<script>
    var btn1 = document.getElementById("btn1");
    var btn2 = document.getElementById("btn2");
    var box = document.getElementById("box");

    function move(speed) {
        return function() {
            box.style.left = box.offsetLeft + speed + "px";
        }
    }
    btn1.onclick = move(5);
    btn2.onclick = move(-5);
</script>


41、JS没有块级作用域。

for循环中定义的变量，在for循环执行完毕后的外面，依然可以访问。



42、JS中的函数有两重身份:

函数本身是一个对象，可以被赋予属性和方法。
函数可以作为一个构造器，创建新的对象。


43、对象实例化时，会拷贝构造函数里的每个属性。
JS是通过函数来模拟对象的。
每个函数都是Function对象的一个实例，每个其它对象又都是通过函数来实例化的。


44、模版渲染

将数据绑定到模版上，最终生成HTML。

C语言的printf，Java的format，其实都是模版技术，只不过是把数据渲染到格式串上，最终生成字符串。



45、原型里的变量，只有其值为引用类型时，才可以被所有对象共享。


46、动态添加的元素，可能无法绑定事件，这时候需要用到“委托”机制。














